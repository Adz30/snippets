{
	"Contract Skeleton": {
		"prefix": "contract",
		"body": [
			"// SPDX-License-Identifier: MIT",
			"pragma solidity ^0.8.19;",
			"",
			"contract $1 {",
			"    $2",
			"",
			"    constructor($3) {",
			"        $4",
			"    }",
			"}"
		],
		"description": "Basic contract skeleton with constructor"
	},
	"Only Owner Modifier": {
		"prefix": "onlyowner",
		"body": [
			"modifier onlyOwner() {",
			"    require(msg.sender == owner, \"Not owner\");",
			"    _;",
			"}"
		],
		"description": "Access control modifier for owner"
	},
	"Constructor with Immutable": {
		"prefix": "constructor",
		"body": [
			"address public immutable owner;",
			"",
			"constructor() {",
			"    owner = msg.sender;",
			"}"
		],
		"description": "Constructor with immutable owner"
	},
	"Event Declaration": {
		"prefix": "event",
		"body": [
			"event $1($2);"
		],
		"description": "Custom event declaration"
	},
	"Emit Event": {
		"prefix": "emit",
		"body": [
			"emit $1($2);"
		],
		"description": "Emit event"
	},
	"Custom Error": {
		"prefix": "error",
		"body": [
			"error $1($2);"
		],
		"description": "Custom error"
	},
	"Only Owner Function": {
		"prefix": "fonlyowner",
		"body": [
			"function $1($2) public onlyOwner $3 {",
			"    $4",
			"}"
		],
		"description": "Function with onlyOwner modifier"
	},
	"Revert With Custom Error": {
		"prefix": "revert",
		"body": [
			"revert $1($2);"
		],
		"description": "Revert using custom error"
	},
	"Interface Template": {
		"prefix": "interface",
		"body": [
			"interface I$1 {",
			"    function $2($3) external view returns ($4);",
			"}"
		],
		"description": "Interface definition"
	},
	"ERC20 Read Functions": {
		"prefix": "erc20reads",
		"body": [
			"IERC20 public token;",
			"",
			"function balanceOf(address user) external view returns (uint256) {",
			"    return token.balanceOf(user);",
			"}",
			"",
			"function allowanceOf(address owner, address spender) external view returns (uint256) {",
			"    return token.allowance(owner, spender);",
			"}"
		],
		"description": "ERC20 read helper functions"
	},
	"Safe Transfer": {
		"prefix": "safetransfer",
		"body": [
			"IERC20(token).transfer($1, $2);"
		],
		"description": "Safe token transfer"
	},
	"Receive Ether": {
		"prefix": "receive",
		"body": [
			"receive() external payable {}"
		],
		"description": "Receive ETH fallback"
	},
	"SafeMath Example": {
		"prefix": "safemath",
		"body": [
			"using SafeMath for uint256;",
			"",
			"uint256 result = a.add(b);"
		],
		"description": "Use SafeMath for uint256"
	},
	"External Function": {
		"prefix": "fext",
		"body": [
			"function $1($2) external $3 returns ($4) {",
			"    $5",
			"}"
		],
		"description": "External function"
	},
	"Public Function": {
		"prefix": "fpub",
		"body": [
			"function $1($2) public $3 returns ($4) {",
			"    $5",
			"}"
		],
		"description": "Public function"
	},
	"Internal Function": {
		"prefix": "fint",
		"body": [
			"function $1($2) internal $3 returns ($4) {",
			"    $5",
			"}"
		],
		"description": "Internal function"
	},
	"Private Function": {
		"prefix": "fpriv",
		"body": [
			"function $1($2) private $3 returns ($4) {",
			"    $5",
			"}"
		],
		"description": "Private function"
	},
	"View Function": {
		"prefix": "fview",
		"body": [
			"function $1($2) public view returns ($3) {",
			"    return $4;",
			"}"
		],
		"description": "View function"
	},
	"Pure Function": {
		"prefix": "fpure",
		"body": [
			"function $1($2) public pure returns ($3) {",
			"    return $4;",
			"}"
		],
		"description": "Pure function"
	},
	"Payable Function": {
		"prefix": "fpay",
		"body": [
			"function $1() external payable {",
			"    $2",
			"}"
		],
		"description": "Payable function"
	},
	"Receive Ether Function": {
		"prefix": "freceive",
		"body": [
			"receive() external payable {",
			"    // Handle ETH sent directly to the contract",
			"}"
		],
		"description": "Receive function for ETH"
	},
	"Fallback Function": {
		"prefix": "ffallback",
		"body": [
			"fallback() external payable {",
			"    // Fallback logic here",
			"}"
		],
		"description": "Fallback function for unmatched calls"
	},
	"Function with Modifier": {
		"prefix": "fmod",
		"body": [
			"function $1($2) public $3 $4 returns ($5) {",
			"    $6",
			"}"
		],
		"description": "Function using a modifier"
	}
}
